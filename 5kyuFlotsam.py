
#Okay
pic1 = [
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '-', '|', ' ', '|',
        '-', '|', ' ', '|', '-', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', '|', ' ', '|',
     ' ', '|', ' ', '|', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    ['~', '\\', '-', '-', '-', '-', '-', '-', '-', '|', '-', '|', '-', '|',
        '-', '|', '-', '|', '-', '|', '-', '-', '-', '-', '-', '-', '/', '~'],
    ['~', '~', '\\', ' ', ' ', ' ', 'F', ' ', ' ', ' ', '│', ' ', ' ', ' ',
        'S', ' ', ' ', ' ', '│', ' ', ' ', ' ', 'T', ' ', ' ', '/', '~', '~'],
    ['~', '~', '~', '\\', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', 'x', '-', '-', '-', '-', '-', '/', '~', '~', '~'],
    ['~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~',
        '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~'],
]

#Almost Okay
pic2 = [
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '-', '|', ' ', '|',
        '-', '|', ' ', '|', '-', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', '|', ' ', '|',
     ' ', '|', ' ', '|', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    ['~', '\\', '-', '-', '-', '-', '-', '-', '-', '|', '-', '|', '-', '|',
        '-', '|', '-', '|', '-', '|', '-', '-', '-', '-', '-', '-', '/', '~'],
    ['~', '~', '\\', ' ', ' ', ' ', 'F', ' ', ' ', ' ', '│', ' ', ' ', ' ',
        'S', ' ', ' ', ' ', '│', ' ', ' ', ' ', 'T', ' ', ' ', 'x', '~', '~'],
    ['~', '~', '~', '\\', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '/', '~', '~', '~'],
    ['~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~',
        '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~'],
]

#More
pic3 = [
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '=', '=', '|', ' ', ' ', '|', '=',
        '=', '|', ' ', ' ', '|', '=', '=', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', '_', '|', '_', '_', '|', '_', '_', '|', '_',
     '_', '|', '_', '_', '|', '_', '_', '|', '_', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', '_', '_', '|', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
     '_', '_', '_', '_', '_', '_', '_', '_', '_', '|', '_', '_', '_', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', '_', '_', '|', '_', '_', '[', ']', '_', '_', '[', ']', '_', '_', '[', ']', '_',
     '_', '[', ']', '_', '_', '[', ']', '_', '_', '[', ']', '_', '_', '|', '_', 'x', 'x', ' '],
    ['~', '|', ' ', ' ', ' ', 'F', ' ', ' ', 'x', ' ', ' ', 'S', ' ', ' ', ' ', ' ', '|', ' ',
     ' ', 'T', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', '~'],
    ['~', 'x', '_', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', 'x', '_', '|', '_',
     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '/', '~', '~'],
    ['~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~',
     '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~'],
]

#Enemy Inside
pic4 = [
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '=', '=', '|', ' ', ' ', '|', '=',
        '=', '|', ' ', ' ', '|', '=', '=', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', '_', '|', '_', '_', '|', '_', '_', '|', '_',
     '_', '|', '_', '_', '|', '_', '_', '|', '_', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', '_', '_', '|', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
     '_', '_', '_', '_', '_', '_', '_', '_', '_', '|', '_', '_', '_', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', '_', '_', '|', '_', '_', '[', ']', '_', '_', '[', ']', '_', '_', '[', ']', '_',
     '_', '[', ']', '_', '_', '[', ']', '_', '_', '[', ']', '_', '_', '|', '_', 'x', 'x', 'x'],
    ['~', '|', ' ', ' ', ' ', 'F', ' ', ' ', 'x', ' ', ' ', 'S', ' ', ' ', ' ', ' ', 'x', ' ',
     ' ', 'T', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', '~'],
    ['~', '|', '_', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '_', '_', '|', '_',
     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '/', '~', '~'],
    ['~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~',
     '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~'],
]

#No one
pic5 = [
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '=', '=', '|', ' ', ' ', '|', '=',
        '=', '|', ' ', ' ', '|', '=', '=', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', '_', '|', '_', '_', '|', '_', '_', '|', '_',
     '_', '|', '_', '_', '|', '_', '_', '|', '_', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', '_', '_', '|', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
     '_', '_', '_', '_', '_', '_', '_', '_', '_', '|', '_', '_', '_', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', '_', '_', '|', '_', '_', '[', ']', '_', '_', '[', ']', '_', '_', '[', ']', '_',
     '_', '[', ']', '_', '_', '[', ']', '_', '_', '[', ']', '_', '_', '|', '_', 'x', 'x', ' '],
    ['~', '|', ' ', ' ', ' ', 'F', ' ', ' ', 'x', ' ', ' ', 'S', ' ', ' ', ' ', ' ', 'x', ' ',
     ' ', 'T', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', '~'],
    ['~', '|', 'x', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '_', '_', '|', '_',
     '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '/', '~', '~'],
    ['~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~',
     '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~', '~'],
]


def check_water(image_pp, idx0_p, idx1_p):
    is_water = False
    idx0_len, idx1_len = len(image_pp), len(image_pp[0]) 
    for px in [(idx0_p-1, idx1_p), (idx0_p+1, idx1_p), (idx0_p, idx1_p-1), (idx0_p, idx1_p+1)]:
        if 0 <= px[1] < idx1_len and 0 <= px[0] < idx0_len and image_pp[px[0]][px[1]] == '~':
            is_water = True
            break

    return is_water


def show_image(image_p):
    for axis0_list in image_p:
        print("".join(axis1_item for axis1_item in axis0_list))


def find_impact_x(image_p):
    x_points = []
    for idx0, axis0 in enumerate(image_p):
        xs = [idx1 for idx1, c in enumerate(axis0) if c == 'x']
        for x_idx1 in xs:
            if check_water(image_p, idx0, x_idx1):
                x_points.append((idx0, x_idx1))
    return x_points


def water_leak_impact(survive_p, image_p, len_0, len_1, x_p, direction):
    idx0, idx1 = x_p[0], x_p[1]
    if direction == "RIGHT":
        r_start, r_end, r_step = idx1+1, len_1, 1
    elif direction == "LEFT":
        r_start, r_end, r_step = idx1-1, -1, -1
    elif direction == "UP":
        r_start, r_end, r_step = idx0-1, -1, -1
    elif direction == "DOWN":
        r_start, r_end, r_step = idx0+1, len_0, 1
    else:
        assert("Invalid Direction!")

    if direction == "RIGHT" or direction == "LEFT":
        for dir_idx1 in range(r_start, r_end, r_step):
            if image_p[idx0][dir_idx1] == ' ' or image_p[idx0][dir_idx1] == 'x':
                image_p[idx0][dir_idx1] = '~'
            elif image_p[idx0][dir_idx1] in survive_p.keys():
                survive_p.pop(image_p[idx0][dir_idx1])
                image_p[idx0][dir_idx1] = '~'
            else:
                break
    elif direction == "UP" or direction == "DOWN":
        for dir_idx0 in range(r_start, r_end, r_step):
            if image_p[dir_idx0][idx1] == ' ' or image_p[dir_idx0][idx1] == 'x':
                image_p[dir_idx0][idx1] = '~'
            elif image_p[dir_idx0][idx1] in survive_p.keys():
                survive_p.pop(image_p[dir_idx0][idx1])
                image_p[dir_idx0][idx1] = '~'
            else:
                break

            #Left side
            water_leak_impact(survive_p, image_p, len_0, len_1, (dir_idx0, idx1), "LEFT")
            #Right side
            water_leak_impact(survive_p, image_p, len_0, len_1, (dir_idx0, idx1), "RIGHT")
    
directions = ['RIGHT', 'LEFT', "UP", "DOWN"]

def flotsam(image):
    survive = {'F':'Frank', 'S': 'Sam', 'T': 'Tom'}

    show_image(image)
    x_points = find_impact_x(image)
    print(x_points)
    
    idx0_len, idx1_len = len(image), len(image[0]) 
    for x in x_points:
        for check_side in directions:
            water_leak_impact(survive, image, idx0_len, idx1_len, x, check_side)

    print(f"Survior is {survive.values()}")
    return " ".join(survive.values())


tests = [pic1, pic2, pic3, pic4, pic5]
#tests = [pic5]
for t in tests:
    print(flotsam(t))
    print([i for i, j in locals().items() if j == t][0])
