import re


#PATTERN = re.compile(r'((((0*)1*)0|1*)1)0*')
#PATTERN = re.compile(r'^1((10*1)|(01*0))*10*$')
#PATTERN = re.compile(r'0+|(^(0*1)((10*1)|(01*0))*10*$)')
PATTERN = re.compile(r'^(0|11|(1((00)|(01*0))*1))*(0|11)*$')

bin_list = [0b10111, \
            0b101111, \
            0b1011110, \
            0b10111100, \
            0b101111000, \
            0b1011110001, \
            0b10111100011, \
            0b101111000110, \
            0b1011110001100, \
            0b10111100011000, \
            0b101111000110000, \
            0b1011110001100001, \
            0b10111100011000010, \
            0b101111000110000101, \
            0b1011110001100001010, \
            0b10111100011000010100, \
            0b101111000110000101001, \
            0b1011110001100001010011, \
            0b10111100011000010100111, \
            0b101111000110000101001110] 


tests = [" 0", "abc", "000", "110", "111", "{:b}".format(12345678)]
# tests = ["011 110", "001"]


# print("{:b}".format(12345678))
# print("{:b}".format(11))

for s in tests:
    print(bool(PATTERN.match(s)))

def mod3(binary_digit):
    return binary_digit % 3


for i in bin_list:
    print(mod3(i))